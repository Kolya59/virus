// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dispatcherFunction.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetTargetReq struct {
	Uuid                 []byte   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTargetReq) Reset()         { *m = GetTargetReq{} }
func (m *GetTargetReq) String() string { return proto.CompactTextString(m) }
func (*GetTargetReq) ProtoMessage()    {}
func (*GetTargetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9007b02db7f1f7a1, []int{0}
}

func (m *GetTargetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTargetReq.Unmarshal(m, b)
}
func (m *GetTargetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTargetReq.Marshal(b, m, deterministic)
}
func (m *GetTargetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTargetReq.Merge(m, src)
}
func (m *GetTargetReq) XXX_Size() int {
	return xxx_messageInfo_GetTargetReq.Size(m)
}
func (m *GetTargetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTargetReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetTargetReq proto.InternalMessageInfo

func (m *GetTargetReq) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type GetTargetRes struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Certificate          []byte   `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTargetRes) Reset()         { *m = GetTargetRes{} }
func (m *GetTargetRes) String() string { return proto.CompactTextString(m) }
func (*GetTargetRes) ProtoMessage()    {}
func (*GetTargetRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_9007b02db7f1f7a1, []int{1}
}

func (m *GetTargetRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTargetRes.Unmarshal(m, b)
}
func (m *GetTargetRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTargetRes.Marshal(b, m, deterministic)
}
func (m *GetTargetRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTargetRes.Merge(m, src)
}
func (m *GetTargetRes) XXX_Size() int {
	return xxx_messageInfo_GetTargetRes.Size(m)
}
func (m *GetTargetRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTargetRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetTargetRes proto.InternalMessageInfo

func (m *GetTargetRes) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetTargetRes) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func init() {
	proto.RegisterType((*GetTargetReq)(nil), "pb.GetTargetReq")
	proto.RegisterType((*GetTargetRes)(nil), "pb.GetTargetRes")
}

func init() { proto.RegisterFile("dispatcherFunction.proto", fileDescriptor_9007b02db7f1f7a1) }

var fileDescriptor_9007b02db7f1f7a1 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xc1, 0x6a, 0x83, 0x40,
	0x10, 0x86, 0x71, 0x69, 0x0b, 0x4e, 0xa5, 0x94, 0x39, 0x89, 0x27, 0xf1, 0xd4, 0x93, 0x42, 0xfb,
	0x02, 0x85, 0x96, 0xb6, 0xe7, 0xa5, 0x2f, 0xb0, 0xae, 0x93, 0xb8, 0x24, 0xba, 0xeb, 0xee, 0x98,
	0xe7, 0x0f, 0x59, 0x50, 0x4c, 0x72, 0x1b, 0x3e, 0xbe, 0x81, 0xef, 0x87, 0xbc, 0x33, 0xc1, 0x29,
	0xd6, 0x3d, 0xf9, 0x9f, 0x79, 0xd4, 0x6c, 0xec, 0x58, 0x3b, 0x6f, 0xd9, 0xa2, 0x70, 0x6d, 0x91,
	0x69, 0x3b, 0x0c, 0x0b, 0xa9, 0x2a, 0xc8, 0x7e, 0x89, 0xff, 0x95, 0xdf, 0x13, 0x4b, 0x9a, 0x10,
	0xe1, 0x61, 0x9e, 0x4d, 0x97, 0x27, 0x65, 0xf2, 0x96, 0xc9, 0x78, 0x57, 0x9f, 0x57, 0x4e, 0xc0,
	0x17, 0x10, 0xc6, 0x45, 0x23, 0x95, 0xc2, 0x38, 0x2c, 0xe1, 0x59, 0x93, 0x67, 0xb3, 0x33, 0x5a,
	0x31, 0xe5, 0x22, 0xbe, 0x6e, 0xd1, 0xfb, 0x09, 0x70, 0x29, 0xf9, 0x5e, 0xdb, 0xb0, 0x81, 0xc7,
	0xaf, 0x9e, 0xf4, 0x01, 0xb1, 0x76, 0x6d, 0xfd, 0x47, 0xea, 0xc8, 0x7d, 0x04, 0x92, 0xa6, 0xe2,
	0x9e, 0x05, 0x6c, 0x20, 0x5d, 0x43, 0xf0, 0xf5, 0x22, 0x6c, 0xdb, 0x8b, 0x5b, 0x12, 0xda, 0xa7,
	0x38, 0xf2, 0xe3, 0x1c, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x10, 0xeb, 0x71, 0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FunctionDispatcherClient is the client API for FunctionDispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FunctionDispatcherClient interface {
	Check(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckRes, error)
	GetTarget(ctx context.Context, in *GetTargetReq, opts ...grpc.CallOption) (*GetTargetRes, error)
}

type functionDispatcherClient struct {
	cc *grpc.ClientConn
}

func NewFunctionDispatcherClient(cc *grpc.ClientConn) FunctionDispatcherClient {
	return &functionDispatcherClient{cc}
}

func (c *functionDispatcherClient) Check(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckRes, error) {
	out := new(HealthCheckRes)
	err := c.cc.Invoke(ctx, "/pb.FunctionDispatcher/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionDispatcherClient) GetTarget(ctx context.Context, in *GetTargetReq, opts ...grpc.CallOption) (*GetTargetRes, error) {
	out := new(GetTargetRes)
	err := c.cc.Invoke(ctx, "/pb.FunctionDispatcher/GetTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionDispatcherServer is the server API for FunctionDispatcher service.
type FunctionDispatcherServer interface {
	Check(context.Context, *HealthCheckReq) (*HealthCheckRes, error)
	GetTarget(context.Context, *GetTargetReq) (*GetTargetRes, error)
}

// UnimplementedFunctionDispatcherServer can be embedded to have forward compatible implementations.
type UnimplementedFunctionDispatcherServer struct {
}

func (*UnimplementedFunctionDispatcherServer) Check(ctx context.Context, req *HealthCheckReq) (*HealthCheckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedFunctionDispatcherServer) GetTarget(ctx context.Context, req *GetTargetReq) (*GetTargetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTarget not implemented")
}

func RegisterFunctionDispatcherServer(s *grpc.Server, srv FunctionDispatcherServer) {
	s.RegisterService(&_FunctionDispatcher_serviceDesc, srv)
}

func _FunctionDispatcher_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionDispatcherServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FunctionDispatcher/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionDispatcherServer).Check(ctx, req.(*HealthCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionDispatcher_GetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionDispatcherServer).GetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FunctionDispatcher/GetTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionDispatcherServer).GetTarget(ctx, req.(*GetTargetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FunctionDispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FunctionDispatcher",
	HandlerType: (*FunctionDispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _FunctionDispatcher_Check_Handler,
		},
		{
			MethodName: "GetTarget",
			Handler:    _FunctionDispatcher_GetTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatcherFunction.proto",
}

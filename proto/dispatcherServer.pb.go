// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dispatcherServer.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterRes_RequestStatus int32

const (
	RegisterRes_UNKNOWN        RegisterRes_RequestStatus = 0
	RegisterRes_REGISTERED     RegisterRes_RequestStatus = 1
	RegisterRes_NOT_REGISTERED RegisterRes_RequestStatus = 2
)

var RegisterRes_RequestStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "REGISTERED",
	2: "NOT_REGISTERED",
}

var RegisterRes_RequestStatus_value = map[string]int32{
	"UNKNOWN":        0,
	"REGISTERED":     1,
	"NOT_REGISTERED": 2,
}

func (x RegisterRes_RequestStatus) String() string {
	return proto.EnumName(RegisterRes_RequestStatus_name, int32(x))
}

func (RegisterRes_RequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_25d8cea2d6475f34, []int{1, 0}
}

type GetNextServerRes_RequestStatus int32

const (
	GetNextServerRes_UNKNOWN      GetNextServerRes_RequestStatus = 0
	GetNextServerRes_ACCEPTED     GetNextServerRes_RequestStatus = 1
	GetNextServerRes_NOT_ACCEPTED GetNextServerRes_RequestStatus = 2
)

var GetNextServerRes_RequestStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACCEPTED",
	2: "NOT_ACCEPTED",
}

var GetNextServerRes_RequestStatus_value = map[string]int32{
	"UNKNOWN":      0,
	"ACCEPTED":     1,
	"NOT_ACCEPTED": 2,
}

func (x GetNextServerRes_RequestStatus) String() string {
	return proto.EnumName(GetNextServerRes_RequestStatus_name, int32(x))
}

func (GetNextServerRes_RequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_25d8cea2d6475f34, []int{3, 0}
}

type RegisterReq struct {
	Certificate          []byte   `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterReq) Reset()         { *m = RegisterReq{} }
func (m *RegisterReq) String() string { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()    {}
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_25d8cea2d6475f34, []int{0}
}

func (m *RegisterReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterReq.Unmarshal(m, b)
}
func (m *RegisterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterReq.Marshal(b, m, deterministic)
}
func (m *RegisterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterReq.Merge(m, src)
}
func (m *RegisterReq) XXX_Size() int {
	return xxx_messageInfo_RegisterReq.Size(m)
}
func (m *RegisterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterReq proto.InternalMessageInfo

func (m *RegisterReq) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type RegisterRes struct {
	Status               RegisterRes_RequestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pb.RegisterRes_RequestStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RegisterRes) Reset()         { *m = RegisterRes{} }
func (m *RegisterRes) String() string { return proto.CompactTextString(m) }
func (*RegisterRes) ProtoMessage()    {}
func (*RegisterRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_25d8cea2d6475f34, []int{1}
}

func (m *RegisterRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRes.Unmarshal(m, b)
}
func (m *RegisterRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRes.Marshal(b, m, deterministic)
}
func (m *RegisterRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRes.Merge(m, src)
}
func (m *RegisterRes) XXX_Size() int {
	return xxx_messageInfo_RegisterRes.Size(m)
}
func (m *RegisterRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRes.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRes proto.InternalMessageInfo

func (m *RegisterRes) GetStatus() RegisterRes_RequestStatus {
	if m != nil {
		return m.Status
	}
	return RegisterRes_UNKNOWN
}

type GetNextServerReq struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Certificate          []byte   `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNextServerReq) Reset()         { *m = GetNextServerReq{} }
func (m *GetNextServerReq) String() string { return proto.CompactTextString(m) }
func (*GetNextServerReq) ProtoMessage()    {}
func (*GetNextServerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_25d8cea2d6475f34, []int{2}
}

func (m *GetNextServerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNextServerReq.Unmarshal(m, b)
}
func (m *GetNextServerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNextServerReq.Marshal(b, m, deterministic)
}
func (m *GetNextServerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextServerReq.Merge(m, src)
}
func (m *GetNextServerReq) XXX_Size() int {
	return xxx_messageInfo_GetNextServerReq.Size(m)
}
func (m *GetNextServerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextServerReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextServerReq proto.InternalMessageInfo

func (m *GetNextServerReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetNextServerReq) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type GetNextServerRes struct {
	Status               GetNextServerRes_RequestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=pb.GetNextServerRes_RequestStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GetNextServerRes) Reset()         { *m = GetNextServerRes{} }
func (m *GetNextServerRes) String() string { return proto.CompactTextString(m) }
func (*GetNextServerRes) ProtoMessage()    {}
func (*GetNextServerRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_25d8cea2d6475f34, []int{3}
}

func (m *GetNextServerRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNextServerRes.Unmarshal(m, b)
}
func (m *GetNextServerRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNextServerRes.Marshal(b, m, deterministic)
}
func (m *GetNextServerRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextServerRes.Merge(m, src)
}
func (m *GetNextServerRes) XXX_Size() int {
	return xxx_messageInfo_GetNextServerRes.Size(m)
}
func (m *GetNextServerRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextServerRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextServerRes proto.InternalMessageInfo

func (m *GetNextServerRes) GetStatus() GetNextServerRes_RequestStatus {
	if m != nil {
		return m.Status
	}
	return GetNextServerRes_UNKNOWN
}

func init() {
	proto.RegisterEnum("pb.RegisterRes_RequestStatus", RegisterRes_RequestStatus_name, RegisterRes_RequestStatus_value)
	proto.RegisterEnum("pb.GetNextServerRes_RequestStatus", GetNextServerRes_RequestStatus_name, GetNextServerRes_RequestStatus_value)
	proto.RegisterType((*RegisterReq)(nil), "pb.RegisterReq")
	proto.RegisterType((*RegisterRes)(nil), "pb.RegisterRes")
	proto.RegisterType((*GetNextServerReq)(nil), "pb.GetNextServerReq")
	proto.RegisterType((*GetNextServerRes)(nil), "pb.GetNextServerRes")
}

func init() { proto.RegisterFile("dispatcherServer.proto", fileDescriptor_25d8cea2d6475f34) }

var fileDescriptor_25d8cea2d6475f34 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xff, 0x04, 0xfe, 0x5a, 0x6f, 0xd3, 0x18, 0x2e, 0x22, 0x12, 0x10, 0x4a, 0x56, 0x2e,
	0x24, 0x85, 0x8a, 0x1b, 0x75, 0xa1, 0xb4, 0xa1, 0x8a, 0x90, 0xca, 0xb4, 0xe2, 0x52, 0xd2, 0x78,
	0xb5, 0x83, 0xd6, 0x4c, 0x66, 0xa6, 0xe2, 0x13, 0xb8, 0xf2, 0x59, 0x7c, 0x46, 0xc9, 0x54, 0x4b,
	0x9a, 0x56, 0xb7, 0x5f, 0x4e, 0x66, 0xce, 0xc7, 0x19, 0xd8, 0xb9, 0xe7, 0x4a, 0x24, 0x3a, 0x9d,
	0x90, 0x1c, 0x92, 0x7c, 0x25, 0x19, 0x0a, 0x99, 0xe9, 0x0c, 0x6d, 0x31, 0xf6, 0x9d, 0x34, 0x9b,
	0x4e, 0xb3, 0x97, 0x39, 0x09, 0xda, 0xd0, 0x60, 0xf4, 0xc8, 0x95, 0x26, 0xc9, 0x28, 0xc7, 0x16,
	0x34, 0x52, 0x92, 0x9a, 0x3f, 0xf0, 0x34, 0xd1, 0xb4, 0x6b, 0xb5, 0xac, 0x7d, 0x87, 0x95, 0x51,
	0xf0, 0x6e, 0x95, 0xff, 0x50, 0x78, 0x04, 0x35, 0xa5, 0x13, 0x3d, 0x53, 0x26, 0xec, 0x76, 0xf6,
	0x42, 0x31, 0x0e, 0x4b, 0x81, 0x90, 0x51, 0x3e, 0x23, 0xa5, 0x87, 0x26, 0xc4, 0xbe, 0xc3, 0xc1,
	0x19, 0x34, 0x97, 0x3e, 0x60, 0x03, 0x36, 0x6e, 0xe2, 0xab, 0x78, 0x70, 0x1b, 0x7b, 0xff, 0xd0,
	0x05, 0x60, 0x51, 0xff, 0x72, 0x38, 0x8a, 0x58, 0xd4, 0xf3, 0x2c, 0x44, 0x70, 0xe3, 0xc1, 0xe8,
	0xae, 0xc4, 0xec, 0xa0, 0x07, 0x5e, 0x9f, 0x74, 0x4c, 0x6f, 0x7a, 0xae, 0x58, 0xd4, 0x77, 0xc1,
	0xe6, 0xc2, 0x14, 0xd9, 0x64, 0x36, 0x17, 0x55, 0x1d, 0x7b, 0x55, 0xe7, 0xc3, 0x5a, 0x39, 0x46,
	0xe1, 0x71, 0xc5, 0x29, 0x28, 0x9c, 0xaa, 0xa9, 0x5f, 0xc4, 0x4e, 0xff, 0x14, 0x73, 0xa0, 0x7e,
	0xde, 0xed, 0x46, 0xd7, 0x23, 0xa3, 0xe5, 0x81, 0x53, 0x68, 0x2d, 0x88, 0xdd, 0xf9, 0xb4, 0xc0,
	0x9b, 0xdf, 0xd0, 0x5b, 0x2c, 0x88, 0x6d, 0xf8, 0xdf, 0x9d, 0x50, 0xfa, 0x84, 0x58, 0xf4, 0xb8,
	0xa0, 0xe4, 0x59, 0x4f, 0x0c, 0x60, 0x94, 0xfb, 0xab, 0x4c, 0xe1, 0x01, 0xd4, 0x7f, 0x16, 0xc0,
	0xad, 0xe5, 0x3d, 0x72, 0xbf, 0x02, 0x14, 0x9e, 0x40, 0x73, 0xc9, 0x0d, 0xb7, 0xd7, 0xe8, 0xe6,
	0xfe, 0x3a, 0xaa, 0xc6, 0x35, 0xf3, 0x8c, 0x0e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x8d,
	0xf4, 0xe6, 0x72, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServerDispatcherClient is the client API for ServerDispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServerDispatcherClient interface {
	Check(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckRes, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
	GetNextServer(ctx context.Context, in *GetNextServerReq, opts ...grpc.CallOption) (*GetNextServerRes, error)
}

type serverDispatcherClient struct {
	cc *grpc.ClientConn
}

func NewServerDispatcherClient(cc *grpc.ClientConn) ServerDispatcherClient {
	return &serverDispatcherClient{cc}
}

func (c *serverDispatcherClient) Check(ctx context.Context, in *HealthCheckReq, opts ...grpc.CallOption) (*HealthCheckRes, error) {
	out := new(HealthCheckRes)
	err := c.cc.Invoke(ctx, "/pb.ServerDispatcher/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDispatcherClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := c.cc.Invoke(ctx, "/pb.ServerDispatcher/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverDispatcherClient) GetNextServer(ctx context.Context, in *GetNextServerReq, opts ...grpc.CallOption) (*GetNextServerRes, error) {
	out := new(GetNextServerRes)
	err := c.cc.Invoke(ctx, "/pb.ServerDispatcher/GetNextServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerDispatcherServer is the server API for ServerDispatcher service.
type ServerDispatcherServer interface {
	Check(context.Context, *HealthCheckReq) (*HealthCheckRes, error)
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
	GetNextServer(context.Context, *GetNextServerReq) (*GetNextServerRes, error)
}

// UnimplementedServerDispatcherServer can be embedded to have forward compatible implementations.
type UnimplementedServerDispatcherServer struct {
}

func (*UnimplementedServerDispatcherServer) Check(ctx context.Context, req *HealthCheckReq) (*HealthCheckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedServerDispatcherServer) Register(ctx context.Context, req *RegisterReq) (*RegisterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedServerDispatcherServer) GetNextServer(ctx context.Context, req *GetNextServerReq) (*GetNextServerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextServer not implemented")
}

func RegisterServerDispatcherServer(s *grpc.Server, srv ServerDispatcherServer) {
	s.RegisterService(&_ServerDispatcher_serviceDesc, srv)
}

func _ServerDispatcher_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDispatcherServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerDispatcher/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDispatcherServer).Check(ctx, req.(*HealthCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDispatcher_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDispatcherServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerDispatcher/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDispatcherServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerDispatcher_GetNextServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerDispatcherServer).GetNextServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerDispatcher/GetNextServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerDispatcherServer).GetNextServer(ctx, req.(*GetNextServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerDispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServerDispatcher",
	HandlerType: (*ServerDispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ServerDispatcher_Check_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ServerDispatcher_Register_Handler,
		},
		{
			MethodName: "GetNextServer",
			Handler:    _ServerDispatcher_GetNextServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatcherServer.proto",
}
